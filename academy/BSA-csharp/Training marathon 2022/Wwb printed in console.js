//What will be printed on the console?
//setTimeoutвыполняется асинхронно переданный обратный вызов будет вызван после завершения цикла.

// a)

for (var i = 0; i < 5; i++) {
  setTimeout(() => console.log(i), 1);
}
//В этом коде происходит цикл for, который выполняется пять раз. При каждой итерации выполняется функция setTimeout, которая откладывает выполнение переданной ей функции колбэка на 1 миллисекунду. Внутри колбэка вызывается функция console.log(i), где i - это значение переменной i на момент выполнения колбэка. Однако, из-за того, что выполнение откладывается на 1 миллисекунду, цикл for выполняется полностью, и к моменту выполнения колбэков переменная i будет иметь значение 5. Поэтому, в результате будут выведены пять раз число 5.

// b)

for (let i = 0; i < 5; i++) {
  setTimeout(() => console.log(i), 1);
}

//В этом коде также используется цикл for, но с ключевым словом let для объявления переменной i. В отличие от ключевого слова var, которое имеет функциональную область видимости, ключевое слово let имеет блочную область видимости. Поэтому каждая итерация цикла создает новую переменную i со своим собственным значением. Внутри колбэка функции setTimeout вызывается функция console.log(i), которая будет выводить значение соответствующей переменной i на момент выполнения колбэка. В результате будут выведены числа от 0 до 4, поскольку каждый колбэк получит свое собственное значение переменной i в пределах своей области видимости блока for.

b) a) 5 5 5 5 5; b) 0 1 2 3 4
// Он будет перезаписываться при каждой итерации, и когда setTimeoutвызывается, оно будет иметь последнее значение

//Область видимости переменной, объявленной с помощью varявляется его текущим контекстом выполнения.  Который может быть ограничен функцией или быть глобальным для переменных, объявленных вне функции.

// letимеет область действия блока. Блок — это фрагмент кода, ограниченный фигурными скобками. {}. Все, что находится внутри фигурных скобок, принадлежит блоку. Таким образом, переменная, объявленная в блоке с letбудут доступны только внутри этого блока.

